name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy_backend:
        description: 'Deploy backend'
        required: true
        type: boolean
        default: false
      deploy_frontend:
        description: 'Deploy frontend'
        required: true
        type: boolean
        default: false

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_NAME: salary-backend
  REGION: europe-west1
  SQLALCHEMY_DATABASE_URL: ${{ secrets.SQLALCHEMY_DATABASE_URL }}
  DEPLOY_BACKEND: ${{ github.event.inputs.deploy_backend == 'true' || contains(github.event.head_commit.message, '[b]') }}
  DEPLOY_FRONTEND: ${{ github.event.inputs.deploy_frontend == 'true' || contains(github.event.head_commit.message, '[f]') }}

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main

    - name: Set up Python
      uses: actions/setup-python@main
      with:
        python-version: '3.11.4'
        cache: 'pip'

    - name: Cache Poetry installation
      id: cache-poetry
      uses: actions/cache@main
      with:
        path: |
          ~/.local/bin/poetry
          ~/.local/share/pypoetry
          ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}-v1
        restore-keys: |
          poetry-${{ runner.os }}-v1-

    - name: Install Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.in-project true

    - name: Cache virtual environment
      id: cache-venv
      uses: actions/cache@main
      with:
        path: .venv
        key: venv-${{ runner.os }}-python-3.11.4-${{ hashFiles('poetry.lock') }}-v1
        restore-keys: |
          venv-${{ runner.os }}-python-3.11.4-v1-

    - name: Install dependencies
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: poetry install

    - name: Run checks
      run: make check-backend

    - name: Run tests
      run: make test-backend

    - name: Cache GCloud SDK
      uses: actions/cache@main
      with:
        path: |
          ~/.cache/google-cloud-sdk
          ~/.config/gcloud
        key: gcloud-sdk-${{ runner.os }}-${{ hashFiles('.github/workflows/deploy.yml') }}-v1
        restore-keys: |
          gcloud-sdk-${{ runner.os }}-v1-

    - name: Google Auth
      if: env.DEPLOY_BACKEND == 'true'
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SDK
      if: env.DEPLOY_BACKEND == 'true'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: 'gke-gcloud-auth-plugin'

    - name: Deploy Backend and Set URL
      if: env.DEPLOY_BACKEND == 'true'
      run: |
        make set-backend-env PROJECT_ID=${{ secrets.GCP_PROJECT_ID }} RECAPTCHA_KEY=${{ secrets.RECAPTCHA_KEY }}
        make deploy-backend SQLALCHEMY_DATABASE_URL=${{ secrets.SQLALCHEMY_DATABASE_URL }} ENV=prod

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main

    - name: Set up Node.js
      uses: actions/setup-node@main
      with:
        node-version: '18'

    - name: Cache npm dependencies
      uses: actions/cache@main
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          npm-${{ runner.os }}-

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run lint
      working-directory: ./frontend
      run: npm run lint

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Cache GCloud SDK
      uses: actions/cache@main
      with:
        path: |
          ~/.cache/google-cloud-sdk
          ~/.config/gcloud
        key: gcloud-sdk-${{ runner.os }}-${{ hashFiles('.github/workflows/deploy.yml') }}-v1
        restore-keys: |
          gcloud-sdk-${{ runner.os }}-v1-

    - name: Cache Firebase Tools
      uses: actions/cache@main
      with:
        path: |
          ~/.npm/firebase-tools
          ~/.cache/firebase
          ~/.config/configstore/firebase-tools.json
        key: firebase-tools-${{ runner.os }}-${{ hashFiles('frontend/firebase.json', 'frontend/.firebaserc') }}
        restore-keys: |
          firebase-tools-${{ runner.os }}-

    - name: Google Auth
      if: env.DEPLOY_FRONTEND == 'true'
      id: auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        project_id: ${{ secrets.GCP_PROJECT_ID }}

    - name: Set up Cloud SDK
      if: env.DEPLOY_FRONTEND == 'true'
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        install_components: 'beta'

    - name: Install Firebase CLI
      if: env.DEPLOY_FRONTEND == 'true'
      run: |
        if ! command -v firebase &> /dev/null; then
          npm install -g firebase-tools
        fi

    - name: Deploy Frontend
      if: env.DEPLOY_FRONTEND == 'true'
      env:
        FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      run: |
        make set-frontend-env RECAPTCHA_KEY=${{ secrets.RECAPTCHA_KEY }}
        make deploy-frontend
