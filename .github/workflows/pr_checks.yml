name: Pull Request Checks

on:
  pull_request:
    branches: [ main ]

env:
  CACHE_VERSION: v1

jobs:
  backend_checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main

    - name: Set up Python
      uses: actions/setup-python@main
      with:
        python-version: '3.11.4'
        cache: 'pip'

    - name: Cache Poetry installation
      id: cache-poetry
      uses: actions/cache@main
      with:
        path: |
          ~/.local/bin/poetry
          ~/.local/share/pypoetry
          ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ env.CACHE_VERSION }}-

    - name: Install Poetry
      if: steps.cache-poetry.outputs.cache-hit != 'true'
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        poetry config virtualenvs.in-project true

    - name: Cache virtual environment
      id: cache-venv
      uses: actions/cache@main
      with:
        path: .venv
        key: venv-${{ runner.os }}-python-3.11.4-${{ hashFiles('poetry.lock') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          venv-${{ runner.os }}-python-3.11.4-${{ env.CACHE_VERSION }}-

    - name: Install dependencies
      if: steps.cache-venv.outputs.cache-hit != 'true'
      run: poetry install

    - name: Run checks
      run: make check-backend

    - name: Run tests
      run: make test-backend

  frontend_checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@main

    - name: Set up Node.js
      uses: actions/setup-node@main
      with:
        node-version: '18'

    - name: Cache npm dependencies
      uses: actions/cache@main
      with:
        path: ~/.npm
        key: npm-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          npm-${{ runner.os }}-${{ env.CACHE_VERSION }}-

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run lint
      working-directory: ./frontend
      run: npm run lint

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --watchAll=false

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

